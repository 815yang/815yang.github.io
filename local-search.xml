<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言字符串问题</title>
    <link href="/2022/11/30/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/30/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言字符串问题"><a href="#C语言字符串问题" class="headerlink" title="C语言字符串问题"></a>C语言字符串问题</h1><p>C语言中涉及到字符串有两个方面：字符串常量 和 字符串变量</p><h2 id="1-字符串常量"><a href="#1-字符串常量" class="headerlink" title="1.字符串常量"></a>1.字符串常量</h2><h3 id="①字符串常量"><a href="#①字符串常量" class="headerlink" title="①字符串常量"></a>①字符串常量</h3><p><strong>字符串常量的含义：</strong>字符串常量是一对双引号括起来的字符序列</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">如 ：  <span class="hljs-string">&quot;abcd&quot;</span>   ”我是常量<span class="hljs-string">&quot;   printf(&quot;</span>我是字符串常量<span class="hljs-string">&quot;);    双引号标起来的都是字符串常量。</span><br></code></pre></td></tr></table></figure><h4 id="字符串常量是什么？"><a href="#字符串常量是什么？" class="headerlink" title="字符串常量是什么？"></a>字符串常量是什么？</h4><p>字符串常量当然就是不可以变的 字符串啦！</p><h4 id="①-①通过C语言代码理解"><a href="#①-①通过C语言代码理解" class="headerlink" title="①-①通过C语言代码理解"></a>①-①通过C语言代码理解</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include&lt;stdio.h&gt;</span><br><span class="hljs-type">void</span> main()<br>&#123;<br><span class="hljs-type">char</span> *a = &quot;abcdef&quot;;<br>printf(&quot;%s&quot;,a);<br>&#125;//这个结果成功输出 <br><br><span class="hljs-comment">/*来看看这个*/</span><br><span class="hljs-meta">#include&lt;stdio.h&gt;</span><br><span class="hljs-type">void</span> main()<br>&#123;<br><span class="hljs-type">char</span> *a = &quot;abcdef&quot;;<br>printf(&quot;%s\n&quot;,a);<br>*a = &quot;我要更改值啦！&quot;;<br>printf(&quot;%s\n&quot;,a);<br>&#125;<br><span class="hljs-comment">/*这下提示了吧*/</span><br>q@ubuntu:~/Desktop/Str$ gcc -o test main.c<br>main.c: <span class="hljs-keyword">In</span> <span class="hljs-keyword">function</span> ‘main’:<br>main.c:<span class="hljs-number">6</span>:<span class="hljs-number">5</span>: <span class="hljs-built_in">warning</span>: assignment makes <span class="hljs-type">integer</span> <span class="hljs-keyword">from</span> pointer <span class="hljs-keyword">without</span> a <span class="hljs-keyword">cast</span> [-Wint-<span class="hljs-keyword">conversion</span>]<br>  *a = &quot;我要更改值啦！&quot;;<br>     ^<br> <br> <span class="hljs-comment">/*让咱再来运行一下，你看到了什么？报错啦！说明 字符串常量的值改不了*/</span><br>q@ubuntu:~/Desktop/Str$ ./test<br>abcdef<br>Segmentation fault (core dumped)<br><br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/61655645/204725192-d0163b1f-3c5e-4e0c-b2c3-908ada9e1463.png" alt="image-20221130140458842"></p><h4 id="①-②通过汇编-内存理解"><a href="#①-②通过汇编-内存理解" class="headerlink" title="①-②通过汇编+内存理解"></a>①-②通过汇编+内存理解</h4><p>IDA打开下面代码程序</p><p>X64位程序中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> *a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未初始化a指针是：%p\n&quot;</span>,a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未初始化a指针指向内存空间的值：%s\n&quot;</span>,a);<br>a = <span class="hljs-string">&quot;abcdef&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化后a的指针是：%p\n&quot;</span>,a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化后a指针指向内存空间的值：%s\n&quot;</span>,a);<br>&#125;<br></code></pre></td></tr></table></figure><p>main函数的汇编代码：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; Attributes: bp-based frame</span><br><br><span class="hljs-comment">; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="hljs-meta">public</span> main<br>main proc <span class="hljs-built_in">near</span><br><br>var_8= <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br><br><span class="hljs-comment">; __unwind &#123;</span><br><span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbp</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rbp</span>, <span class="hljs-built_in">rsp</span><br><span class="hljs-keyword">sub</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">10h</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rbp</span>+var_8]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdi</span>, format     <span class="hljs-comment">; format</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">call</span>    _printf<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rbp</span>+var_8]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdi</span>, byte_768   <span class="hljs-comment">; format</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">call</span>    _printf<br><span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rax</span>, aAbcdef    <span class="hljs-comment">; &quot;abcdef&quot;</span><br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_8], <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rbp</span>+var_8]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdi</span>, byte_7A8   <span class="hljs-comment">; format</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">call</span>    _printf<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rbp</span>+var_8]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdi</span>, byte_7C8   <span class="hljs-comment">; format</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">call</span>    _printf<br><span class="hljs-keyword">nop</span><br><span class="hljs-keyword">leave</span><br><span class="hljs-keyword">retn</span><br><span class="hljs-comment">; &#125; // starts at 64A</span><br>main endp<br></code></pre></td></tr></table></figure><p>兄弟们那就来吧：printf(“%s”,str);   printf函数传参顺序是 rdi rsi rdx rcx …..</p><p>所以 %s 格式控制符，通过rdi传参。  str传入字符串 通过rsi传参….</p><p>咱们只用关注 这三条指令</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>,byte_7C8<span class="hljs-comment">; 这个format 就是格式控制符的指针</span><br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">rax</span>, aAbcdef    <span class="hljs-comment">;  这个aAbcdef就是字符串&quot;abcdef&quot;指针</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">rax</span><br></code></pre></td></tr></table></figure><p><strong>所以我们 ，来看看 aAcdef地址吧</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">.rodata:000000000000079A<span class="hljs-number"> 61 </span>62<span class="hljs-number"> 63 </span>64<span class="hljs-number"> 65 </span>66<span class="hljs-number"> 00 </span>         aAbcdef db &#x27;abcdef&#x27;,0                   ; DATA XREF: main+38↑o<br><br></code></pre></td></tr></table></figure><p><strong>看到没有！！！它！在 .rodata段。 rodata 就是说 read only data的意思。 就说字符串常量它只可读</strong></p><hr><h3 id="②字符串常量赋值：是赋地址"><a href="#②字符串常量赋值：是赋地址" class="headerlink" title="②字符串常量赋值：是赋地址"></a>②字符串常量赋值：是赋地址</h3><p>前沿：字符串赋值是 <strong>赋字符串地址的</strong>，<strong>而不是 赋字符串本身</strong>的值。</p><p>我们来看看例子:</p><h4 id="②-①通过C语言代码理解"><a href="#②-①通过C语言代码理解" class="headerlink" title="②-①通过C语言代码理解"></a>②-①通过C语言代码理解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> *a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未初始化a指针是：%p\n&quot;</span>,a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未初始化a指针指向内存空间的值：%s\n&quot;</span>,a);<br>a = <span class="hljs-string">&quot;abcdef&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化后a的指针是：%p\n&quot;</span>,a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化后a指针指向内存空间的值：%s\n&quot;</span>,a);<br>&#125;<br><span class="hljs-comment">//让我们来输出一下看看结果：</span><br>未初始化a指针是：(nil)<br>未初始化a指针指向内存空间的值：(null)<br>初始化后a的指针是：<span class="hljs-number">0x562fe5e9079a</span><br>初始化后a指针指向内存空间的值：abcdef<br><span class="hljs-comment">/**扩展一下：</span><br><span class="hljs-comment">*nil表示无值，无其他意义</span><br><span class="hljs-comment">*null表示空的意思</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>我们可以看到：</p><p><strong>未初始化前</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">char *<span class="hljs-selector-tag">a</span>;<br>printf(&quot;未初始化<span class="hljs-selector-tag">a</span>指针是：%<span class="hljs-selector-tag">p</span>\n&quot;,<span class="hljs-selector-tag">a</span>);<br>//结果：<br>未初始化<span class="hljs-selector-tag">a</span>指针是：(nil)<br>未初始化<span class="hljs-selector-tag">a</span>指针指向内存空间的值：(null)<br></code></pre></td></tr></table></figure><p> 未初始化前，指针nil，可以理解为无效指针。 指针指向的值也为空NULL</p><p><strong>初始化后</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">a = <span class="hljs-string">&quot;abcdef&quot;</span>;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;初始化后a的指针是：%p\n&quot;</span>,a);<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;a指针指向内存空间的值：%s&quot;</span>,*a);<br><span class="hljs-regexp">//</span>结果<br>初始化后a的指针是：<span class="hljs-number">0x562fe5e9079a</span><br>初始化后a指针指向内存空间的值：abcdef<br></code></pre></td></tr></table></figure><p>可以看到 a的指针变为：0x562fe5e9079a</p><p><strong>🔺由此可见： 字符串赋值  实际是上 是赋了地址。</strong> </p><h4 id="②-②通过汇编代码理解"><a href="#②-②通过汇编代码理解" class="headerlink" title="②-②通过汇编代码理解"></a>②-②通过汇编代码理解</h4><p>x64架构下：待会就看看call printf 下面的vararg(代指printf，传入的  量);</p><p><img src="https://user-images.githubusercontent.com/61655645/204725274-da763467-ec7b-48f4-95b6-ce25cbbabd4d.png" alt="image-20221130121507081"></p><p>​看到 箭头下面的：vararg了嘛？   </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">► <span class="hljs-number">0x5555555546a0</span> &lt;main+<span class="hljs-number">86</span>&gt;     call   <span class="hljs-keyword">printf</span>@plt &lt;<span class="hljs-keyword">printf</span>@plt&gt;<br>       <span class="hljs-keyword">format</span>: <span class="hljs-number">0x5555555547a8</span> ◂— <span class="hljs-number">0x8ce58ba7e59d88e5</span><br>       vararg: <span class="hljs-number">0x55555555479a</span> ◂— <span class="hljs-number">0x666564636261</span> /* <span class="hljs-string">&#x27;abcdef&#x27;</span> */<br></code></pre></td></tr></table></figure><p>0x666564636261 &#x2F;* ‘abcdef’ *&#x2F;  这个地址，就是存放abcdef 的首地址</p><p>让我们来看看：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">pwndbg&gt; print /c <span class="hljs-number">0</span>x666564636261<br><span class="hljs-variable">$32</span> = <span class="hljs-number">97</span> <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-regexp">//</span>我们看到了什么？  输出了这个地址的值，是<span class="hljs-string">&#x27;a&#x27;</span> 就是我们这一串字符的首地址！<br></code></pre></td></tr></table></figure><p>*<em>从这可以看出：</em>字符串传递，依旧是以地址的形式传递的！</p><h4 id="②-③通过内存机制理解"><a href="#②-③通过内存机制理解" class="headerlink" title="②-③通过内存机制理解"></a>②-③通过内存机制理解</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">代码中已出现的字符串常量会保存一个不可修改的内存区域 <span class="hljs-comment">(一般是.RODATA段)</span>当然有时候可能会在别的地方，如代码段等。<br></code></pre></td></tr></table></figure><p>让我们看看反汇编代码:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rax</span>, aAbcdef    <span class="hljs-comment">; &quot;abcdef&quot;</span><br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_8], <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rbp</span>+var_8]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rdi</span>, byte_7A8   <span class="hljs-comment">; format</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">call</span>    _printf<br></code></pre></td></tr></table></figure><p>把 aAbcdef 这个变量地址，给到rax寄存器。可以看到aAbcdef ；是“abcdef” 常量名</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">.rodata:0000000000000796<span class="hljs-number"> 25 </span>                           db  25h ; %<br>.rodata:0000000000000797<span class="hljs-number"> 73 </span>                           db  73h ; s<br>.rodata:0000000000000798 0A                            db  0Ah<br>.rodata:0000000000000799<span class="hljs-number"> 00 </span>                           db    0<br>.rodata:000000000000079A<span class="hljs-number"> 61 </span>62<span class="hljs-number"> 63 </span>64<span class="hljs-number"> 65 </span>66<span class="hljs-number"> 00 </span>         aAbcdef db &#x27;abcdef&#x27;,0                   ; DATA XREF: main+38↑o<br>.rodata:00000000000007A1<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>         align 8<br>.rodata:00000000000007A8                               ; const char byte_7A8<br>.rodata:00000000000007A8 E5                            byte_7A8 db 0E5h         <br></code></pre></td></tr></table></figure><p>让我们来探个究竟：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">.rodata:000000000000079A<span class="hljs-number"> 61 </span>62<span class="hljs-number"> 63 </span>64<span class="hljs-number"> 65 </span>66<span class="hljs-number"> 00 </span>         aAbcdef db &#x27;abcdef&#x27;,0<br>这是个好东西： 可以看到我们的字符串&quot;abcdef&quot;就在 这个地址段上<br></code></pre></td></tr></table></figure><p>所以：字符串传值通过地址来传。</p><p><strong>扩展：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">为了提高程序内存空间利用率：编译器在编译c语言代码过程，会自动分配字符引用信息。且重复的字符串常量，会自动去重，只在符号信息中保留一个。 也就是说，程序中有<span class="hljs-built_in">n</span>个相同字符串，实质上它们的地址都是一样的。<br><br></code></pre></td></tr></table></figure><h2 id="2-字符串变量"><a href="#2-字符串变量" class="headerlink" title="2.字符串变量"></a>2.字符串变量</h2><p>字符串变量：又称作字符数组。</p><p>如 ‘a’, ‘b’, ‘c’</p><p>可以修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> str[<span class="hljs-number">4</span>];<br>str[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;a&#x27;</span>;<br>str[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;b&#x27;</span>;<br>str[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;c&#x27;</span>;<br>str[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;e&#x27;</span>;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>    &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str[i]);<br>    &#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n请输入要修改的字符(仅限半角字符abcderfg,.;等)\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%1c&quot;</span>,&amp;str[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;来看看修改后的结果吧\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">q<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop/Str</span><span class="hljs-variable">$ </span>./test<br>abce<br>请输入要修改的字符(仅限半角字符abcderfg,.;等)<br>qaq^<br>来看看修改后的结果吧<br>qaq^<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
